// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace WebAPI
{
    /// <summary> The WebService service client. </summary>
    public partial class WebServiceClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of WebServiceClient. </summary>
        public WebServiceClient() : this(new Uri(""), new WebServiceClientOptions())
        {
        }

        /// <summary> Initializes a new instance of WebServiceClient. </summary>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public WebServiceClient(Uri endpoint, WebServiceClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new WebServiceClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetActivitiesAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetActivitiesAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idA").ToString());
        /// Console.WriteLine(result[0].GetProperty("titleA").ToString());
        /// Console.WriteLine(result[0].GetProperty("descriptionA").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("pictureA").ToString());
        /// Console.WriteLine(result[0].GetProperty("idPj1").ToString());
        /// Console.WriteLine(result[0].GetProperty("idT1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Activity</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   titleA: string, # Optional.
        ///   descriptionA: string, # Optional.
        ///   expectedBeginA: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   expectedEndA: DateOnly, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idPj1: string, # Optional.
        ///   idT1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetActivitiesAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetActivities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetActivitiesRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetActivities and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetActivities();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idA").ToString());
        /// Console.WriteLine(result[0].GetProperty("titleA").ToString());
        /// Console.WriteLine(result[0].GetProperty("descriptionA").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedBeginA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("expectedEndA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("pictureA").ToString());
        /// Console.WriteLine(result[0].GetProperty("idPj1").ToString());
        /// Console.WriteLine(result[0].GetProperty("idT1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Activity</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   titleA: string, # Optional.
        ///   descriptionA: string, # Optional.
        ///   expectedBeginA: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   expectedEndA: DateOnly, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idPj1: string, # Optional.
        ///   idT1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetActivities(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetActivities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetActivitiesRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostActivityAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostActivityAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostActivityAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idA = "<idA>",
        ///     titleA = "<titleA>",
        ///     descriptionA = "<descriptionA>",
        ///     expectedBeginA = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     expectedEndA = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureA = new {},
        ///     idPj1 = "<idPj1>",
        ///     idT1 = "<idT1>",
        /// };
        /// 
        /// Response response = await client.PostActivityAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idA").ToString());
        /// Console.WriteLine(result.GetProperty("titleA").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionA").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureA").ToString());
        /// Console.WriteLine(result.GetProperty("idPj1").ToString());
        /// Console.WriteLine(result.GetProperty("idT1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Activity</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   titleA: string, # Optional.
        ///   descriptionA: string, # Optional.
        ///   expectedBeginA: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   expectedEndA: DateOnly, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idPj1: string, # Optional.
        ///   idT1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Activity</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   titleA: string, # Optional.
        ///   descriptionA: string, # Optional.
        ///   expectedBeginA: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   expectedEndA: DateOnly, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idPj1: string, # Optional.
        ///   idT1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostActivityAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostActivity");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostActivityRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostActivity with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostActivity(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostActivity with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idA = "<idA>",
        ///     titleA = "<titleA>",
        ///     descriptionA = "<descriptionA>",
        ///     expectedBeginA = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     expectedEndA = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureA = new {},
        ///     idPj1 = "<idPj1>",
        ///     idT1 = "<idT1>",
        /// };
        /// 
        /// Response response = client.PostActivity(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idA").ToString());
        /// Console.WriteLine(result.GetProperty("titleA").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionA").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureA").ToString());
        /// Console.WriteLine(result.GetProperty("idPj1").ToString());
        /// Console.WriteLine(result.GetProperty("idT1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Activity</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   titleA: string, # Optional.
        ///   descriptionA: string, # Optional.
        ///   expectedBeginA: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   expectedEndA: DateOnly, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idPj1: string, # Optional.
        ///   idT1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Activity</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   titleA: string, # Optional.
        ///   descriptionA: string, # Optional.
        ///   expectedBeginA: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   expectedEndA: DateOnly, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idPj1: string, # Optional.
        ///   idT1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostActivity(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostActivity");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostActivityRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetActivityAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetActivityAsync("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idA").ToString());
        /// Console.WriteLine(result.GetProperty("titleA").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionA").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureA").ToString());
        /// Console.WriteLine(result.GetProperty("idPj1").ToString());
        /// Console.WriteLine(result.GetProperty("idT1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Activity</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   titleA: string, # Optional.
        ///   descriptionA: string, # Optional.
        ///   expectedBeginA: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   expectedEndA: DateOnly, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idPj1: string, # Optional.
        ///   idT1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetActivityAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetActivity");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetActivityRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetActivity with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetActivity("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idA").ToString());
        /// Console.WriteLine(result.GetProperty("titleA").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionA").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("expectedBeginA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("expectedEndA").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureA").ToString());
        /// Console.WriteLine(result.GetProperty("idPj1").ToString());
        /// Console.WriteLine(result.GetProperty("idT1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Activity</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   titleA: string, # Optional.
        ///   descriptionA: string, # Optional.
        ///   expectedBeginA: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   expectedEndA: DateOnly, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idPj1: string, # Optional.
        ///   idT1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetActivity(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetActivity");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetActivityRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutActivityAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutActivityAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutActivityAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idA = "<idA>",
        ///     titleA = "<titleA>",
        ///     descriptionA = "<descriptionA>",
        ///     expectedBeginA = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     expectedEndA = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureA = new {},
        ///     idPj1 = "<idPj1>",
        ///     idT1 = "<idT1>",
        /// };
        /// 
        /// Response response = await client.PutActivityAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Activity</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   titleA: string, # Optional.
        ///   descriptionA: string, # Optional.
        ///   expectedBeginA: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   expectedEndA: DateOnly, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idPj1: string, # Optional.
        ///   idT1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutActivityAsync(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutActivity");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutActivityRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutActivity with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutActivity("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutActivity with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idA = "<idA>",
        ///     titleA = "<titleA>",
        ///     descriptionA = "<descriptionA>",
        ///     expectedBeginA = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     expectedEndA = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureA = new {},
        ///     idPj1 = "<idPj1>",
        ///     idT1 = "<idT1>",
        /// };
        /// 
        /// Response response = client.PutActivity("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Activity</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   titleA: string, # Optional.
        ///   descriptionA: string, # Optional.
        ///   expectedBeginA: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   expectedEndA: DateOnly, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idPj1: string, # Optional.
        ///   idT1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutActivity(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutActivity");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutActivityRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteActivityAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteActivityAsync("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteActivityAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteActivity");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteActivityRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteActivity with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteActivity("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteActivity(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteActivity");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteActivityRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAdminsAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetAdminsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idA").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameA").ToString());
        /// Console.WriteLine(result[0].GetProperty("emailA").ToString());
        /// Console.WriteLine(result[0].GetProperty("telA").ToString());
        /// Console.WriteLine(result[0].GetProperty("passwordA").ToString());
        /// Console.WriteLine(result[0].GetProperty("pictureA").ToString());
        /// Console.WriteLine(result[0].GetProperty("idR1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Admin</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   nameA: string, # Optional.
        ///   emailA: string, # Optional.
        ///   telA: string, # Optional.
        ///   passwordA: string, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idR1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAdminsAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetAdmins");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAdminsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAdmins and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetAdmins();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idA").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameA").ToString());
        /// Console.WriteLine(result[0].GetProperty("emailA").ToString());
        /// Console.WriteLine(result[0].GetProperty("telA").ToString());
        /// Console.WriteLine(result[0].GetProperty("passwordA").ToString());
        /// Console.WriteLine(result[0].GetProperty("pictureA").ToString());
        /// Console.WriteLine(result[0].GetProperty("idR1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Admin</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   nameA: string, # Optional.
        ///   emailA: string, # Optional.
        ///   telA: string, # Optional.
        ///   passwordA: string, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idR1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAdmins(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetAdmins");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAdminsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostAdminAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostAdminAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostAdminAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idA = "<idA>",
        ///     nameA = "<nameA>",
        ///     emailA = "<emailA>",
        ///     telA = "<telA>",
        ///     passwordA = "<passwordA>",
        ///     pictureA = new {},
        ///     idR1 = "<idR1>",
        /// };
        /// 
        /// Response response = await client.PostAdminAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idA").ToString());
        /// Console.WriteLine(result.GetProperty("nameA").ToString());
        /// Console.WriteLine(result.GetProperty("emailA").ToString());
        /// Console.WriteLine(result.GetProperty("telA").ToString());
        /// Console.WriteLine(result.GetProperty("passwordA").ToString());
        /// Console.WriteLine(result.GetProperty("pictureA").ToString());
        /// Console.WriteLine(result.GetProperty("idR1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Admin</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   nameA: string, # Optional.
        ///   emailA: string, # Optional.
        ///   telA: string, # Optional.
        ///   passwordA: string, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idR1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Admin</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   nameA: string, # Optional.
        ///   emailA: string, # Optional.
        ///   telA: string, # Optional.
        ///   passwordA: string, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idR1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostAdminAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostAdmin");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostAdminRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostAdmin with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostAdmin(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostAdmin with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idA = "<idA>",
        ///     nameA = "<nameA>",
        ///     emailA = "<emailA>",
        ///     telA = "<telA>",
        ///     passwordA = "<passwordA>",
        ///     pictureA = new {},
        ///     idR1 = "<idR1>",
        /// };
        /// 
        /// Response response = client.PostAdmin(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idA").ToString());
        /// Console.WriteLine(result.GetProperty("nameA").ToString());
        /// Console.WriteLine(result.GetProperty("emailA").ToString());
        /// Console.WriteLine(result.GetProperty("telA").ToString());
        /// Console.WriteLine(result.GetProperty("passwordA").ToString());
        /// Console.WriteLine(result.GetProperty("pictureA").ToString());
        /// Console.WriteLine(result.GetProperty("idR1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Admin</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   nameA: string, # Optional.
        ///   emailA: string, # Optional.
        ///   telA: string, # Optional.
        ///   passwordA: string, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idR1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Admin</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   nameA: string, # Optional.
        ///   emailA: string, # Optional.
        ///   telA: string, # Optional.
        ///   passwordA: string, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idR1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostAdmin(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostAdmin");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostAdminRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAdminAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetAdminAsync("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idA").ToString());
        /// Console.WriteLine(result.GetProperty("nameA").ToString());
        /// Console.WriteLine(result.GetProperty("emailA").ToString());
        /// Console.WriteLine(result.GetProperty("telA").ToString());
        /// Console.WriteLine(result.GetProperty("passwordA").ToString());
        /// Console.WriteLine(result.GetProperty("pictureA").ToString());
        /// Console.WriteLine(result.GetProperty("idR1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Admin</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   nameA: string, # Optional.
        ///   emailA: string, # Optional.
        ///   telA: string, # Optional.
        ///   passwordA: string, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idR1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAdminAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetAdmin");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAdminRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAdmin with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetAdmin("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idA").ToString());
        /// Console.WriteLine(result.GetProperty("nameA").ToString());
        /// Console.WriteLine(result.GetProperty("emailA").ToString());
        /// Console.WriteLine(result.GetProperty("telA").ToString());
        /// Console.WriteLine(result.GetProperty("passwordA").ToString());
        /// Console.WriteLine(result.GetProperty("pictureA").ToString());
        /// Console.WriteLine(result.GetProperty("idR1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Admin</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   nameA: string, # Optional.
        ///   emailA: string, # Optional.
        ///   telA: string, # Optional.
        ///   passwordA: string, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idR1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAdmin(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetAdmin");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAdminRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutAdminAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutAdminAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutAdminAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idA = "<idA>",
        ///     nameA = "<nameA>",
        ///     emailA = "<emailA>",
        ///     telA = "<telA>",
        ///     passwordA = "<passwordA>",
        ///     pictureA = new {},
        ///     idR1 = "<idR1>",
        /// };
        /// 
        /// Response response = await client.PutAdminAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Admin</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   nameA: string, # Optional.
        ///   emailA: string, # Optional.
        ///   telA: string, # Optional.
        ///   passwordA: string, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idR1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutAdminAsync(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutAdmin");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutAdminRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutAdmin with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutAdmin("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutAdmin with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idA = "<idA>",
        ///     nameA = "<nameA>",
        ///     emailA = "<emailA>",
        ///     telA = "<telA>",
        ///     passwordA = "<passwordA>",
        ///     pictureA = new {},
        ///     idR1 = "<idR1>",
        /// };
        /// 
        /// Response response = client.PutAdmin("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Admin</c>:
        /// <code>{
        ///   idA: string, # Optional.
        ///   nameA: string, # Optional.
        ///   emailA: string, # Optional.
        ///   telA: string, # Optional.
        ///   passwordA: string, # Optional.
        ///   pictureA: Bytes, # Optional.
        ///   idR1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutAdmin(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutAdmin");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutAdminRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAdminAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteAdminAsync("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteAdminAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteAdmin");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteAdminRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAdmin with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteAdmin("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteAdmin(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteAdmin");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteAdminRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetClientsAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetClientsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idC").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameC").ToString());
        /// Console.WriteLine(result[0].GetProperty("emailC").ToString());
        /// Console.WriteLine(result[0].GetProperty("passwordC").ToString());
        /// Console.WriteLine(result[0].GetProperty("pictureC").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Client</c>:
        /// <code>{
        ///   idC: string, # Optional.
        ///   nameC: string, # Optional.
        ///   emailC: string, # Optional.
        ///   passwordC: string, # Optional.
        ///   pictureC: Bytes, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetClientsAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetClients");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClientsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetClients and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetClients();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idC").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameC").ToString());
        /// Console.WriteLine(result[0].GetProperty("emailC").ToString());
        /// Console.WriteLine(result[0].GetProperty("passwordC").ToString());
        /// Console.WriteLine(result[0].GetProperty("pictureC").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Client</c>:
        /// <code>{
        ///   idC: string, # Optional.
        ///   nameC: string, # Optional.
        ///   emailC: string, # Optional.
        ///   passwordC: string, # Optional.
        ///   pictureC: Bytes, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetClients(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetClients");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClientsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostClientAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostClientAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostClientAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idC = "<idC>",
        ///     nameC = "<nameC>",
        ///     emailC = "<emailC>",
        ///     passwordC = "<passwordC>",
        ///     pictureC = new {},
        /// };
        /// 
        /// Response response = await client.PostClientAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idC").ToString());
        /// Console.WriteLine(result.GetProperty("nameC").ToString());
        /// Console.WriteLine(result.GetProperty("emailC").ToString());
        /// Console.WriteLine(result.GetProperty("passwordC").ToString());
        /// Console.WriteLine(result.GetProperty("pictureC").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Client</c>:
        /// <code>{
        ///   idC: string, # Optional.
        ///   nameC: string, # Optional.
        ///   emailC: string, # Optional.
        ///   passwordC: string, # Optional.
        ///   pictureC: Bytes, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Client</c>:
        /// <code>{
        ///   idC: string, # Optional.
        ///   nameC: string, # Optional.
        ///   emailC: string, # Optional.
        ///   passwordC: string, # Optional.
        ///   pictureC: Bytes, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostClientAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostClient");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostClientRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostClient with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostClient(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostClient with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idC = "<idC>",
        ///     nameC = "<nameC>",
        ///     emailC = "<emailC>",
        ///     passwordC = "<passwordC>",
        ///     pictureC = new {},
        /// };
        /// 
        /// Response response = client.PostClient(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idC").ToString());
        /// Console.WriteLine(result.GetProperty("nameC").ToString());
        /// Console.WriteLine(result.GetProperty("emailC").ToString());
        /// Console.WriteLine(result.GetProperty("passwordC").ToString());
        /// Console.WriteLine(result.GetProperty("pictureC").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Client</c>:
        /// <code>{
        ///   idC: string, # Optional.
        ///   nameC: string, # Optional.
        ///   emailC: string, # Optional.
        ///   passwordC: string, # Optional.
        ///   pictureC: Bytes, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Client</c>:
        /// <code>{
        ///   idC: string, # Optional.
        ///   nameC: string, # Optional.
        ///   emailC: string, # Optional.
        ///   passwordC: string, # Optional.
        ///   pictureC: Bytes, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostClient(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostClient");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostClientRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetClientAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetClientAsync("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idC").ToString());
        /// Console.WriteLine(result.GetProperty("nameC").ToString());
        /// Console.WriteLine(result.GetProperty("emailC").ToString());
        /// Console.WriteLine(result.GetProperty("passwordC").ToString());
        /// Console.WriteLine(result.GetProperty("pictureC").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Client</c>:
        /// <code>{
        ///   idC: string, # Optional.
        ///   nameC: string, # Optional.
        ///   emailC: string, # Optional.
        ///   passwordC: string, # Optional.
        ///   pictureC: Bytes, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetClientAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetClient");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClientRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetClient with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetClient("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idC").ToString());
        /// Console.WriteLine(result.GetProperty("nameC").ToString());
        /// Console.WriteLine(result.GetProperty("emailC").ToString());
        /// Console.WriteLine(result.GetProperty("passwordC").ToString());
        /// Console.WriteLine(result.GetProperty("pictureC").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Client</c>:
        /// <code>{
        ///   idC: string, # Optional.
        ///   nameC: string, # Optional.
        ///   emailC: string, # Optional.
        ///   passwordC: string, # Optional.
        ///   pictureC: Bytes, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetClient(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetClient");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetClientRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutClientAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutClientAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutClientAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idC = "<idC>",
        ///     nameC = "<nameC>",
        ///     emailC = "<emailC>",
        ///     passwordC = "<passwordC>",
        ///     pictureC = new {},
        /// };
        /// 
        /// Response response = await client.PutClientAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Client</c>:
        /// <code>{
        ///   idC: string, # Optional.
        ///   nameC: string, # Optional.
        ///   emailC: string, # Optional.
        ///   passwordC: string, # Optional.
        ///   pictureC: Bytes, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutClientAsync(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutClient");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutClientRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutClient with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutClient("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutClient with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idC = "<idC>",
        ///     nameC = "<nameC>",
        ///     emailC = "<emailC>",
        ///     passwordC = "<passwordC>",
        ///     pictureC = new {},
        /// };
        /// 
        /// Response response = client.PutClient("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Client</c>:
        /// <code>{
        ///   idC: string, # Optional.
        ///   nameC: string, # Optional.
        ///   emailC: string, # Optional.
        ///   passwordC: string, # Optional.
        ///   pictureC: Bytes, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutClient(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutClient");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutClientRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteClientAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteClientAsync("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteClientAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteClient");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteClientRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteClient with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteClient("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteClient(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteClient");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteClientRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDepartmentsAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetDepartmentsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idDp").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameDp").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Department</c>:
        /// <code>{
        ///   idDp: number, # Optional.
        ///   nameDp: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDepartmentsAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetDepartments");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDepartmentsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDepartments and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetDepartments();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idDp").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameDp").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Department</c>:
        /// <code>{
        ///   idDp: number, # Optional.
        ///   nameDp: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDepartments(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetDepartments");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDepartmentsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostDepartmentAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostDepartmentAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostDepartmentAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idDp = 1234,
        ///     nameDp = "<nameDp>",
        /// };
        /// 
        /// Response response = await client.PostDepartmentAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idDp").ToString());
        /// Console.WriteLine(result.GetProperty("nameDp").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Department</c>:
        /// <code>{
        ///   idDp: number, # Optional.
        ///   nameDp: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Department</c>:
        /// <code>{
        ///   idDp: number, # Optional.
        ///   nameDp: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostDepartmentAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostDepartment");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostDepartmentRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostDepartment with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostDepartment(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostDepartment with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idDp = 1234,
        ///     nameDp = "<nameDp>",
        /// };
        /// 
        /// Response response = client.PostDepartment(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idDp").ToString());
        /// Console.WriteLine(result.GetProperty("nameDp").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Department</c>:
        /// <code>{
        ///   idDp: number, # Optional.
        ///   nameDp: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Department</c>:
        /// <code>{
        ///   idDp: number, # Optional.
        ///   nameDp: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostDepartment(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostDepartment");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostDepartmentRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDepartmentAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetDepartmentAsync(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idDp").ToString());
        /// Console.WriteLine(result.GetProperty("nameDp").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Department</c>:
        /// <code>{
        ///   idDp: number, # Optional.
        ///   nameDp: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDepartmentAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetDepartment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDepartmentRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDepartment with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetDepartment(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idDp").ToString());
        /// Console.WriteLine(result.GetProperty("nameDp").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Department</c>:
        /// <code>{
        ///   idDp: number, # Optional.
        ///   nameDp: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDepartment(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetDepartment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDepartmentRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutDepartmentAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutDepartmentAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutDepartmentAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idDp = 1234,
        ///     nameDp = "<nameDp>",
        /// };
        /// 
        /// Response response = await client.PutDepartmentAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Department</c>:
        /// <code>{
        ///   idDp: number, # Optional.
        ///   nameDp: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutDepartmentAsync(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutDepartment");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutDepartmentRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutDepartment with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutDepartment(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutDepartment with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idDp = 1234,
        ///     nameDp = "<nameDp>",
        /// };
        /// 
        /// Response response = client.PutDepartment(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Department</c>:
        /// <code>{
        ///   idDp: number, # Optional.
        ///   nameDp: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutDepartment(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutDepartment");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutDepartmentRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteDepartmentAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteDepartmentAsync(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteDepartmentAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteDepartment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteDepartmentRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteDepartment with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteDepartment(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteDepartment(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteDepartment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteDepartmentRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNotificationsAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetNotificationsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idN").ToString());
        /// Console.WriteLine(result[0].GetProperty("titleN").ToString());
        /// Console.WriteLine(result[0].GetProperty("descriptionN").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("pictureN").ToString());
        /// Console.WriteLine(result[0].GetProperty("idPj2").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Notification</c>:
        /// <code>{
        ///   idN: string, # Optional.
        ///   titleN: string, # Optional.
        ///   descriptionN: string, # Optional.
        ///   dateTimeIssuedN: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   pictureN: Bytes, # Optional.
        ///   idPj2: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetNotificationsAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetNotifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetNotificationsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNotifications and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetNotifications();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idN").ToString());
        /// Console.WriteLine(result[0].GetProperty("titleN").ToString());
        /// Console.WriteLine(result[0].GetProperty("descriptionN").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateTimeIssuedN").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("pictureN").ToString());
        /// Console.WriteLine(result[0].GetProperty("idPj2").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Notification</c>:
        /// <code>{
        ///   idN: string, # Optional.
        ///   titleN: string, # Optional.
        ///   descriptionN: string, # Optional.
        ///   dateTimeIssuedN: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   pictureN: Bytes, # Optional.
        ///   idPj2: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetNotifications(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetNotifications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetNotificationsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostNotificationAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostNotificationAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostNotificationAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idN = "<idN>",
        ///     titleN = "<titleN>",
        ///     descriptionN = "<descriptionN>",
        ///     dateTimeIssuedN = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureN = new {},
        ///     idPj2 = "<idPj2>",
        /// };
        /// 
        /// Response response = await client.PostNotificationAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idN").ToString());
        /// Console.WriteLine(result.GetProperty("titleN").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionN").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureN").ToString());
        /// Console.WriteLine(result.GetProperty("idPj2").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Notification</c>:
        /// <code>{
        ///   idN: string, # Optional.
        ///   titleN: string, # Optional.
        ///   descriptionN: string, # Optional.
        ///   dateTimeIssuedN: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   pictureN: Bytes, # Optional.
        ///   idPj2: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Notification</c>:
        /// <code>{
        ///   idN: string, # Optional.
        ///   titleN: string, # Optional.
        ///   descriptionN: string, # Optional.
        ///   dateTimeIssuedN: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   pictureN: Bytes, # Optional.
        ///   idPj2: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostNotificationAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostNotification");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostNotificationRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostNotification with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostNotification(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostNotification with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idN = "<idN>",
        ///     titleN = "<titleN>",
        ///     descriptionN = "<descriptionN>",
        ///     dateTimeIssuedN = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureN = new {},
        ///     idPj2 = "<idPj2>",
        /// };
        /// 
        /// Response response = client.PostNotification(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idN").ToString());
        /// Console.WriteLine(result.GetProperty("titleN").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionN").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureN").ToString());
        /// Console.WriteLine(result.GetProperty("idPj2").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Notification</c>:
        /// <code>{
        ///   idN: string, # Optional.
        ///   titleN: string, # Optional.
        ///   descriptionN: string, # Optional.
        ///   dateTimeIssuedN: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   pictureN: Bytes, # Optional.
        ///   idPj2: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Notification</c>:
        /// <code>{
        ///   idN: string, # Optional.
        ///   titleN: string, # Optional.
        ///   descriptionN: string, # Optional.
        ///   dateTimeIssuedN: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   pictureN: Bytes, # Optional.
        ///   idPj2: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostNotification(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostNotification");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostNotificationRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNotificationAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetNotificationAsync("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idN").ToString());
        /// Console.WriteLine(result.GetProperty("titleN").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionN").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureN").ToString());
        /// Console.WriteLine(result.GetProperty("idPj2").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Notification</c>:
        /// <code>{
        ///   idN: string, # Optional.
        ///   titleN: string, # Optional.
        ///   descriptionN: string, # Optional.
        ///   dateTimeIssuedN: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   pictureN: Bytes, # Optional.
        ///   idPj2: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetNotificationAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetNotification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetNotificationRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNotification with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetNotification("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idN").ToString());
        /// Console.WriteLine(result.GetProperty("titleN").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionN").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("dateTimeIssuedN").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureN").ToString());
        /// Console.WriteLine(result.GetProperty("idPj2").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Notification</c>:
        /// <code>{
        ///   idN: string, # Optional.
        ///   titleN: string, # Optional.
        ///   descriptionN: string, # Optional.
        ///   dateTimeIssuedN: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   pictureN: Bytes, # Optional.
        ///   idPj2: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetNotification(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetNotification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetNotificationRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutNotificationAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutNotificationAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutNotificationAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idN = "<idN>",
        ///     titleN = "<titleN>",
        ///     descriptionN = "<descriptionN>",
        ///     dateTimeIssuedN = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureN = new {},
        ///     idPj2 = "<idPj2>",
        /// };
        /// 
        /// Response response = await client.PutNotificationAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Notification</c>:
        /// <code>{
        ///   idN: string, # Optional.
        ///   titleN: string, # Optional.
        ///   descriptionN: string, # Optional.
        ///   dateTimeIssuedN: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   pictureN: Bytes, # Optional.
        ///   idPj2: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutNotificationAsync(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutNotification");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutNotificationRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutNotification with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutNotification("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutNotification with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idN = "<idN>",
        ///     titleN = "<titleN>",
        ///     descriptionN = "<descriptionN>",
        ///     dateTimeIssuedN = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureN = new {},
        ///     idPj2 = "<idPj2>",
        /// };
        /// 
        /// Response response = client.PutNotification("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Notification</c>:
        /// <code>{
        ///   idN: string, # Optional.
        ///   titleN: string, # Optional.
        ///   descriptionN: string, # Optional.
        ///   dateTimeIssuedN: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   pictureN: Bytes, # Optional.
        ///   idPj2: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutNotification(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutNotification");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutNotificationRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteNotificationAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteNotificationAsync("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteNotificationAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteNotification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteNotificationRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteNotification with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteNotification("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteNotification(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteNotification");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteNotificationRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProfessionalsAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetProfessionalsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idP").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameP").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("emailP").ToString());
        /// Console.WriteLine(result[0].GetProperty("passwordP").ToString());
        /// Console.WriteLine(result[0].GetProperty("activeP").ToString());
        /// Console.WriteLine(result[0].GetProperty("sexP").ToString());
        /// Console.WriteLine(result[0].GetProperty("duip").ToString());
        /// Console.WriteLine(result[0].GetProperty("afpp").ToString());
        /// Console.WriteLine(result[0].GetProperty("isssp").ToString());
        /// Console.WriteLine(result[0].GetProperty("zipCodeP").ToString());
        /// Console.WriteLine(result[0].GetProperty("salaryP").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("pictureP").ToString());
        /// Console.WriteLine(result[0].GetProperty("curriculumP").ToString());
        /// Console.WriteLine(result[0].GetProperty("idPfs1").ToString());
        /// Console.WriteLine(result[0].GetProperty("idDp1").ToString());
        /// Console.WriteLine(result[0].GetProperty("idWdt1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Professional</c>:
        /// <code>{
        ///   idP: string, # Optional.
        ///   nameP: string, # Optional.
        ///   dateBirthP: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   emailP: string, # Optional.
        ///   passwordP: string, # Optional.
        ///   activeP: boolean, # Optional.
        ///   sexP: boolean, # Optional.
        ///   duip: string, # Optional.
        ///   afpp: string, # Optional.
        ///   isssp: string, # Optional.
        ///   zipCodeP: string, # Optional.
        ///   salaryP: number, # Optional.
        ///   hiringDateP: DateOnly, # Optional.
        ///   pictureP: Bytes, # Optional.
        ///   curriculumP: Bytes, # Optional.
        ///   idPfs1: number, # Optional.
        ///   idDp1: number, # Optional.
        ///   idWdt1: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetProfessionalsAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProfessionals");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProfessionalsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProfessionals and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetProfessionals();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idP").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameP").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("dateBirthP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("emailP").ToString());
        /// Console.WriteLine(result[0].GetProperty("passwordP").ToString());
        /// Console.WriteLine(result[0].GetProperty("activeP").ToString());
        /// Console.WriteLine(result[0].GetProperty("sexP").ToString());
        /// Console.WriteLine(result[0].GetProperty("duip").ToString());
        /// Console.WriteLine(result[0].GetProperty("afpp").ToString());
        /// Console.WriteLine(result[0].GetProperty("isssp").ToString());
        /// Console.WriteLine(result[0].GetProperty("zipCodeP").ToString());
        /// Console.WriteLine(result[0].GetProperty("salaryP").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("hiringDateP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("pictureP").ToString());
        /// Console.WriteLine(result[0].GetProperty("curriculumP").ToString());
        /// Console.WriteLine(result[0].GetProperty("idPfs1").ToString());
        /// Console.WriteLine(result[0].GetProperty("idDp1").ToString());
        /// Console.WriteLine(result[0].GetProperty("idWdt1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Professional</c>:
        /// <code>{
        ///   idP: string, # Optional.
        ///   nameP: string, # Optional.
        ///   dateBirthP: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   emailP: string, # Optional.
        ///   passwordP: string, # Optional.
        ///   activeP: boolean, # Optional.
        ///   sexP: boolean, # Optional.
        ///   duip: string, # Optional.
        ///   afpp: string, # Optional.
        ///   isssp: string, # Optional.
        ///   zipCodeP: string, # Optional.
        ///   salaryP: number, # Optional.
        ///   hiringDateP: DateOnly, # Optional.
        ///   pictureP: Bytes, # Optional.
        ///   curriculumP: Bytes, # Optional.
        ///   idPfs1: number, # Optional.
        ///   idDp1: number, # Optional.
        ///   idWdt1: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProfessionals(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProfessionals");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProfessionalsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostProfessionalAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostProfessionalAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostProfessionalAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idP = "<idP>",
        ///     nameP = "<nameP>",
        ///     dateBirthP = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     emailP = "<emailP>",
        ///     passwordP = "<passwordP>",
        ///     activeP = true,
        ///     sexP = true,
        ///     duip = "<duip>",
        ///     afpp = "<afpp>",
        ///     isssp = "<isssp>",
        ///     zipCodeP = "<zipCodeP>",
        ///     salaryP = 123.45f,
        ///     hiringDateP = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureP = new {},
        ///     curriculumP = new {},
        ///     idPfs1 = 1234,
        ///     idDp1 = 1234,
        ///     idWdt1 = 1234,
        /// };
        /// 
        /// Response response = await client.PostProfessionalAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idP").ToString());
        /// Console.WriteLine(result.GetProperty("nameP").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("emailP").ToString());
        /// Console.WriteLine(result.GetProperty("passwordP").ToString());
        /// Console.WriteLine(result.GetProperty("activeP").ToString());
        /// Console.WriteLine(result.GetProperty("sexP").ToString());
        /// Console.WriteLine(result.GetProperty("duip").ToString());
        /// Console.WriteLine(result.GetProperty("afpp").ToString());
        /// Console.WriteLine(result.GetProperty("isssp").ToString());
        /// Console.WriteLine(result.GetProperty("zipCodeP").ToString());
        /// Console.WriteLine(result.GetProperty("salaryP").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureP").ToString());
        /// Console.WriteLine(result.GetProperty("curriculumP").ToString());
        /// Console.WriteLine(result.GetProperty("idPfs1").ToString());
        /// Console.WriteLine(result.GetProperty("idDp1").ToString());
        /// Console.WriteLine(result.GetProperty("idWdt1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Professional</c>:
        /// <code>{
        ///   idP: string, # Optional.
        ///   nameP: string, # Optional.
        ///   dateBirthP: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   emailP: string, # Optional.
        ///   passwordP: string, # Optional.
        ///   activeP: boolean, # Optional.
        ///   sexP: boolean, # Optional.
        ///   duip: string, # Optional.
        ///   afpp: string, # Optional.
        ///   isssp: string, # Optional.
        ///   zipCodeP: string, # Optional.
        ///   salaryP: number, # Optional.
        ///   hiringDateP: DateOnly, # Optional.
        ///   pictureP: Bytes, # Optional.
        ///   curriculumP: Bytes, # Optional.
        ///   idPfs1: number, # Optional.
        ///   idDp1: number, # Optional.
        ///   idWdt1: number, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Professional</c>:
        /// <code>{
        ///   idP: string, # Optional.
        ///   nameP: string, # Optional.
        ///   dateBirthP: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   emailP: string, # Optional.
        ///   passwordP: string, # Optional.
        ///   activeP: boolean, # Optional.
        ///   sexP: boolean, # Optional.
        ///   duip: string, # Optional.
        ///   afpp: string, # Optional.
        ///   isssp: string, # Optional.
        ///   zipCodeP: string, # Optional.
        ///   salaryP: number, # Optional.
        ///   hiringDateP: DateOnly, # Optional.
        ///   pictureP: Bytes, # Optional.
        ///   curriculumP: Bytes, # Optional.
        ///   idPfs1: number, # Optional.
        ///   idDp1: number, # Optional.
        ///   idWdt1: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostProfessionalAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostProfessional");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostProfessionalRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostProfessional with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostProfessional(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostProfessional with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idP = "<idP>",
        ///     nameP = "<nameP>",
        ///     dateBirthP = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     emailP = "<emailP>",
        ///     passwordP = "<passwordP>",
        ///     activeP = true,
        ///     sexP = true,
        ///     duip = "<duip>",
        ///     afpp = "<afpp>",
        ///     isssp = "<isssp>",
        ///     zipCodeP = "<zipCodeP>",
        ///     salaryP = 123.45f,
        ///     hiringDateP = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureP = new {},
        ///     curriculumP = new {},
        ///     idPfs1 = 1234,
        ///     idDp1 = 1234,
        ///     idWdt1 = 1234,
        /// };
        /// 
        /// Response response = client.PostProfessional(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idP").ToString());
        /// Console.WriteLine(result.GetProperty("nameP").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("emailP").ToString());
        /// Console.WriteLine(result.GetProperty("passwordP").ToString());
        /// Console.WriteLine(result.GetProperty("activeP").ToString());
        /// Console.WriteLine(result.GetProperty("sexP").ToString());
        /// Console.WriteLine(result.GetProperty("duip").ToString());
        /// Console.WriteLine(result.GetProperty("afpp").ToString());
        /// Console.WriteLine(result.GetProperty("isssp").ToString());
        /// Console.WriteLine(result.GetProperty("zipCodeP").ToString());
        /// Console.WriteLine(result.GetProperty("salaryP").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureP").ToString());
        /// Console.WriteLine(result.GetProperty("curriculumP").ToString());
        /// Console.WriteLine(result.GetProperty("idPfs1").ToString());
        /// Console.WriteLine(result.GetProperty("idDp1").ToString());
        /// Console.WriteLine(result.GetProperty("idWdt1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Professional</c>:
        /// <code>{
        ///   idP: string, # Optional.
        ///   nameP: string, # Optional.
        ///   dateBirthP: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   emailP: string, # Optional.
        ///   passwordP: string, # Optional.
        ///   activeP: boolean, # Optional.
        ///   sexP: boolean, # Optional.
        ///   duip: string, # Optional.
        ///   afpp: string, # Optional.
        ///   isssp: string, # Optional.
        ///   zipCodeP: string, # Optional.
        ///   salaryP: number, # Optional.
        ///   hiringDateP: DateOnly, # Optional.
        ///   pictureP: Bytes, # Optional.
        ///   curriculumP: Bytes, # Optional.
        ///   idPfs1: number, # Optional.
        ///   idDp1: number, # Optional.
        ///   idWdt1: number, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Professional</c>:
        /// <code>{
        ///   idP: string, # Optional.
        ///   nameP: string, # Optional.
        ///   dateBirthP: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   emailP: string, # Optional.
        ///   passwordP: string, # Optional.
        ///   activeP: boolean, # Optional.
        ///   sexP: boolean, # Optional.
        ///   duip: string, # Optional.
        ///   afpp: string, # Optional.
        ///   isssp: string, # Optional.
        ///   zipCodeP: string, # Optional.
        ///   salaryP: number, # Optional.
        ///   hiringDateP: DateOnly, # Optional.
        ///   pictureP: Bytes, # Optional.
        ///   curriculumP: Bytes, # Optional.
        ///   idPfs1: number, # Optional.
        ///   idDp1: number, # Optional.
        ///   idWdt1: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostProfessional(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostProfessional");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostProfessionalRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProfessionalAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetProfessionalAsync("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idP").ToString());
        /// Console.WriteLine(result.GetProperty("nameP").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("emailP").ToString());
        /// Console.WriteLine(result.GetProperty("passwordP").ToString());
        /// Console.WriteLine(result.GetProperty("activeP").ToString());
        /// Console.WriteLine(result.GetProperty("sexP").ToString());
        /// Console.WriteLine(result.GetProperty("duip").ToString());
        /// Console.WriteLine(result.GetProperty("afpp").ToString());
        /// Console.WriteLine(result.GetProperty("isssp").ToString());
        /// Console.WriteLine(result.GetProperty("zipCodeP").ToString());
        /// Console.WriteLine(result.GetProperty("salaryP").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureP").ToString());
        /// Console.WriteLine(result.GetProperty("curriculumP").ToString());
        /// Console.WriteLine(result.GetProperty("idPfs1").ToString());
        /// Console.WriteLine(result.GetProperty("idDp1").ToString());
        /// Console.WriteLine(result.GetProperty("idWdt1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Professional</c>:
        /// <code>{
        ///   idP: string, # Optional.
        ///   nameP: string, # Optional.
        ///   dateBirthP: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   emailP: string, # Optional.
        ///   passwordP: string, # Optional.
        ///   activeP: boolean, # Optional.
        ///   sexP: boolean, # Optional.
        ///   duip: string, # Optional.
        ///   afpp: string, # Optional.
        ///   isssp: string, # Optional.
        ///   zipCodeP: string, # Optional.
        ///   salaryP: number, # Optional.
        ///   hiringDateP: DateOnly, # Optional.
        ///   pictureP: Bytes, # Optional.
        ///   curriculumP: Bytes, # Optional.
        ///   idPfs1: number, # Optional.
        ///   idDp1: number, # Optional.
        ///   idWdt1: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetProfessionalAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProfessional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProfessionalRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProfessional with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetProfessional("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idP").ToString());
        /// Console.WriteLine(result.GetProperty("nameP").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("dateBirthP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("emailP").ToString());
        /// Console.WriteLine(result.GetProperty("passwordP").ToString());
        /// Console.WriteLine(result.GetProperty("activeP").ToString());
        /// Console.WriteLine(result.GetProperty("sexP").ToString());
        /// Console.WriteLine(result.GetProperty("duip").ToString());
        /// Console.WriteLine(result.GetProperty("afpp").ToString());
        /// Console.WriteLine(result.GetProperty("isssp").ToString());
        /// Console.WriteLine(result.GetProperty("zipCodeP").ToString());
        /// Console.WriteLine(result.GetProperty("salaryP").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("hiringDateP").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("pictureP").ToString());
        /// Console.WriteLine(result.GetProperty("curriculumP").ToString());
        /// Console.WriteLine(result.GetProperty("idPfs1").ToString());
        /// Console.WriteLine(result.GetProperty("idDp1").ToString());
        /// Console.WriteLine(result.GetProperty("idWdt1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Professional</c>:
        /// <code>{
        ///   idP: string, # Optional.
        ///   nameP: string, # Optional.
        ///   dateBirthP: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   emailP: string, # Optional.
        ///   passwordP: string, # Optional.
        ///   activeP: boolean, # Optional.
        ///   sexP: boolean, # Optional.
        ///   duip: string, # Optional.
        ///   afpp: string, # Optional.
        ///   isssp: string, # Optional.
        ///   zipCodeP: string, # Optional.
        ///   salaryP: number, # Optional.
        ///   hiringDateP: DateOnly, # Optional.
        ///   pictureP: Bytes, # Optional.
        ///   curriculumP: Bytes, # Optional.
        ///   idPfs1: number, # Optional.
        ///   idDp1: number, # Optional.
        ///   idWdt1: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProfessional(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProfessional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProfessionalRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutProfessionalAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutProfessionalAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutProfessionalAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idP = "<idP>",
        ///     nameP = "<nameP>",
        ///     dateBirthP = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     emailP = "<emailP>",
        ///     passwordP = "<passwordP>",
        ///     activeP = true,
        ///     sexP = true,
        ///     duip = "<duip>",
        ///     afpp = "<afpp>",
        ///     isssp = "<isssp>",
        ///     zipCodeP = "<zipCodeP>",
        ///     salaryP = 123.45f,
        ///     hiringDateP = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureP = new {},
        ///     curriculumP = new {},
        ///     idPfs1 = 1234,
        ///     idDp1 = 1234,
        ///     idWdt1 = 1234,
        /// };
        /// 
        /// Response response = await client.PutProfessionalAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Professional</c>:
        /// <code>{
        ///   idP: string, # Optional.
        ///   nameP: string, # Optional.
        ///   dateBirthP: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   emailP: string, # Optional.
        ///   passwordP: string, # Optional.
        ///   activeP: boolean, # Optional.
        ///   sexP: boolean, # Optional.
        ///   duip: string, # Optional.
        ///   afpp: string, # Optional.
        ///   isssp: string, # Optional.
        ///   zipCodeP: string, # Optional.
        ///   salaryP: number, # Optional.
        ///   hiringDateP: DateOnly, # Optional.
        ///   pictureP: Bytes, # Optional.
        ///   curriculumP: Bytes, # Optional.
        ///   idPfs1: number, # Optional.
        ///   idDp1: number, # Optional.
        ///   idWdt1: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutProfessionalAsync(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutProfessional");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutProfessionalRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutProfessional with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutProfessional("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutProfessional with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idP = "<idP>",
        ///     nameP = "<nameP>",
        ///     dateBirthP = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     emailP = "<emailP>",
        ///     passwordP = "<passwordP>",
        ///     activeP = true,
        ///     sexP = true,
        ///     duip = "<duip>",
        ///     afpp = "<afpp>",
        ///     isssp = "<isssp>",
        ///     zipCodeP = "<zipCodeP>",
        ///     salaryP = 123.45f,
        ///     hiringDateP = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     pictureP = new {},
        ///     curriculumP = new {},
        ///     idPfs1 = 1234,
        ///     idDp1 = 1234,
        ///     idWdt1 = 1234,
        /// };
        /// 
        /// Response response = client.PutProfessional("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Professional</c>:
        /// <code>{
        ///   idP: string, # Optional.
        ///   nameP: string, # Optional.
        ///   dateBirthP: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   emailP: string, # Optional.
        ///   passwordP: string, # Optional.
        ///   activeP: boolean, # Optional.
        ///   sexP: boolean, # Optional.
        ///   duip: string, # Optional.
        ///   afpp: string, # Optional.
        ///   isssp: string, # Optional.
        ///   zipCodeP: string, # Optional.
        ///   salaryP: number, # Optional.
        ///   hiringDateP: DateOnly, # Optional.
        ///   pictureP: Bytes, # Optional.
        ///   curriculumP: Bytes, # Optional.
        ///   idPfs1: number, # Optional.
        ///   idDp1: number, # Optional.
        ///   idWdt1: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutProfessional(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutProfessional");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutProfessionalRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteProfessionalAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteProfessionalAsync("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteProfessionalAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteProfessional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProfessionalRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteProfessional with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteProfessional("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteProfessional(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteProfessional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProfessionalRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProfessionsAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetProfessionsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idPfs").ToString());
        /// Console.WriteLine(result[0].GetProperty("namePfs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Profession</c>:
        /// <code>{
        ///   idPfs: number, # Optional.
        ///   namePfs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetProfessionsAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProfessions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProfessionsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProfessions and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetProfessions();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idPfs").ToString());
        /// Console.WriteLine(result[0].GetProperty("namePfs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Profession</c>:
        /// <code>{
        ///   idPfs: number, # Optional.
        ///   namePfs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProfessions(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProfessions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProfessionsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostProfessionAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostProfessionAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostProfessionAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPfs = 1234,
        ///     namePfs = "<namePfs>",
        /// };
        /// 
        /// Response response = await client.PostProfessionAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPfs").ToString());
        /// Console.WriteLine(result.GetProperty("namePfs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Profession</c>:
        /// <code>{
        ///   idPfs: number, # Optional.
        ///   namePfs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Profession</c>:
        /// <code>{
        ///   idPfs: number, # Optional.
        ///   namePfs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostProfessionAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostProfession");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostProfessionRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostProfession with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostProfession(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostProfession with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPfs = 1234,
        ///     namePfs = "<namePfs>",
        /// };
        /// 
        /// Response response = client.PostProfession(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPfs").ToString());
        /// Console.WriteLine(result.GetProperty("namePfs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Profession</c>:
        /// <code>{
        ///   idPfs: number, # Optional.
        ///   namePfs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Profession</c>:
        /// <code>{
        ///   idPfs: number, # Optional.
        ///   namePfs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostProfession(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostProfession");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostProfessionRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProfessionAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetProfessionAsync(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPfs").ToString());
        /// Console.WriteLine(result.GetProperty("namePfs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Profession</c>:
        /// <code>{
        ///   idPfs: number, # Optional.
        ///   namePfs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetProfessionAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProfession");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProfessionRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProfession with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetProfession(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPfs").ToString());
        /// Console.WriteLine(result.GetProperty("namePfs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Profession</c>:
        /// <code>{
        ///   idPfs: number, # Optional.
        ///   namePfs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProfession(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProfession");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProfessionRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutProfessionAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutProfessionAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutProfessionAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPfs = 1234,
        ///     namePfs = "<namePfs>",
        /// };
        /// 
        /// Response response = await client.PutProfessionAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Profession</c>:
        /// <code>{
        ///   idPfs: number, # Optional.
        ///   namePfs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutProfessionAsync(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutProfession");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutProfessionRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutProfession with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutProfession(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutProfession with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPfs = 1234,
        ///     namePfs = "<namePfs>",
        /// };
        /// 
        /// Response response = client.PutProfession(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Profession</c>:
        /// <code>{
        ///   idPfs: number, # Optional.
        ///   namePfs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutProfession(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutProfession");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutProfessionRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteProfessionAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteProfessionAsync(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteProfessionAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteProfession");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProfessionRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteProfession with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteProfession(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteProfession(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteProfession");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProfessionRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProjectsAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetProjectsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idPj").ToString());
        /// Console.WriteLine(result[0].GetProperty("titlePj").ToString());
        /// Console.WriteLine(result[0].GetProperty("descriptionPj").ToString());
        /// Console.WriteLine(result[0].GetProperty("picturePj").ToString());
        /// Console.WriteLine(result[0].GetProperty("totalPricePj").ToString());
        /// Console.WriteLine(result[0].GetProperty("idPs1").ToString());
        /// Console.WriteLine(result[0].GetProperty("idP1").ToString());
        /// Console.WriteLine(result[0].GetProperty("idC1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   idPj: string, # Optional.
        ///   titlePj: string, # Optional.
        ///   descriptionPj: string, # Optional.
        ///   picturePj: Bytes, # Optional.
        ///   totalPricePj: number, # Optional.
        ///   idPs1: number, # Optional.
        ///   idP1: string, # Optional.
        ///   idC1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetProjectsAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProjects");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProjectsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProjects and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetProjects();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idPj").ToString());
        /// Console.WriteLine(result[0].GetProperty("titlePj").ToString());
        /// Console.WriteLine(result[0].GetProperty("descriptionPj").ToString());
        /// Console.WriteLine(result[0].GetProperty("picturePj").ToString());
        /// Console.WriteLine(result[0].GetProperty("totalPricePj").ToString());
        /// Console.WriteLine(result[0].GetProperty("idPs1").ToString());
        /// Console.WriteLine(result[0].GetProperty("idP1").ToString());
        /// Console.WriteLine(result[0].GetProperty("idC1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   idPj: string, # Optional.
        ///   titlePj: string, # Optional.
        ///   descriptionPj: string, # Optional.
        ///   picturePj: Bytes, # Optional.
        ///   totalPricePj: number, # Optional.
        ///   idPs1: number, # Optional.
        ///   idP1: string, # Optional.
        ///   idC1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProjects(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProjects");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProjectsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostProjectAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostProjectAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostProjectAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPj = "<idPj>",
        ///     titlePj = "<titlePj>",
        ///     descriptionPj = "<descriptionPj>",
        ///     picturePj = new {},
        ///     totalPricePj = 123.45f,
        ///     idPs1 = 1234,
        ///     idP1 = "<idP1>",
        ///     idC1 = "<idC1>",
        /// };
        /// 
        /// Response response = await client.PostProjectAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPj").ToString());
        /// Console.WriteLine(result.GetProperty("titlePj").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionPj").ToString());
        /// Console.WriteLine(result.GetProperty("picturePj").ToString());
        /// Console.WriteLine(result.GetProperty("totalPricePj").ToString());
        /// Console.WriteLine(result.GetProperty("idPs1").ToString());
        /// Console.WriteLine(result.GetProperty("idP1").ToString());
        /// Console.WriteLine(result.GetProperty("idC1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   idPj: string, # Optional.
        ///   titlePj: string, # Optional.
        ///   descriptionPj: string, # Optional.
        ///   picturePj: Bytes, # Optional.
        ///   totalPricePj: number, # Optional.
        ///   idPs1: number, # Optional.
        ///   idP1: string, # Optional.
        ///   idC1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   idPj: string, # Optional.
        ///   titlePj: string, # Optional.
        ///   descriptionPj: string, # Optional.
        ///   picturePj: Bytes, # Optional.
        ///   totalPricePj: number, # Optional.
        ///   idPs1: number, # Optional.
        ///   idP1: string, # Optional.
        ///   idC1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostProjectAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostProjectRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostProject with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostProject(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostProject with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPj = "<idPj>",
        ///     titlePj = "<titlePj>",
        ///     descriptionPj = "<descriptionPj>",
        ///     picturePj = new {},
        ///     totalPricePj = 123.45f,
        ///     idPs1 = 1234,
        ///     idP1 = "<idP1>",
        ///     idC1 = "<idC1>",
        /// };
        /// 
        /// Response response = client.PostProject(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPj").ToString());
        /// Console.WriteLine(result.GetProperty("titlePj").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionPj").ToString());
        /// Console.WriteLine(result.GetProperty("picturePj").ToString());
        /// Console.WriteLine(result.GetProperty("totalPricePj").ToString());
        /// Console.WriteLine(result.GetProperty("idPs1").ToString());
        /// Console.WriteLine(result.GetProperty("idP1").ToString());
        /// Console.WriteLine(result.GetProperty("idC1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   idPj: string, # Optional.
        ///   titlePj: string, # Optional.
        ///   descriptionPj: string, # Optional.
        ///   picturePj: Bytes, # Optional.
        ///   totalPricePj: number, # Optional.
        ///   idPs1: number, # Optional.
        ///   idP1: string, # Optional.
        ///   idC1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   idPj: string, # Optional.
        ///   titlePj: string, # Optional.
        ///   descriptionPj: string, # Optional.
        ///   picturePj: Bytes, # Optional.
        ///   totalPricePj: number, # Optional.
        ///   idPs1: number, # Optional.
        ///   idP1: string, # Optional.
        ///   idC1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostProject(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostProjectRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProjectAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetProjectAsync("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPj").ToString());
        /// Console.WriteLine(result.GetProperty("titlePj").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionPj").ToString());
        /// Console.WriteLine(result.GetProperty("picturePj").ToString());
        /// Console.WriteLine(result.GetProperty("totalPricePj").ToString());
        /// Console.WriteLine(result.GetProperty("idPs1").ToString());
        /// Console.WriteLine(result.GetProperty("idP1").ToString());
        /// Console.WriteLine(result.GetProperty("idC1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   idPj: string, # Optional.
        ///   titlePj: string, # Optional.
        ///   descriptionPj: string, # Optional.
        ///   picturePj: Bytes, # Optional.
        ///   totalPricePj: number, # Optional.
        ///   idPs1: number, # Optional.
        ///   idP1: string, # Optional.
        ///   idC1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetProjectAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProjectRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProject with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetProject("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPj").ToString());
        /// Console.WriteLine(result.GetProperty("titlePj").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionPj").ToString());
        /// Console.WriteLine(result.GetProperty("picturePj").ToString());
        /// Console.WriteLine(result.GetProperty("totalPricePj").ToString());
        /// Console.WriteLine(result.GetProperty("idPs1").ToString());
        /// Console.WriteLine(result.GetProperty("idP1").ToString());
        /// Console.WriteLine(result.GetProperty("idC1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   idPj: string, # Optional.
        ///   titlePj: string, # Optional.
        ///   descriptionPj: string, # Optional.
        ///   picturePj: Bytes, # Optional.
        ///   totalPricePj: number, # Optional.
        ///   idPs1: number, # Optional.
        ///   idP1: string, # Optional.
        ///   idC1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProject(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProjectRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutProjectAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutProjectAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutProjectAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPj = "<idPj>",
        ///     titlePj = "<titlePj>",
        ///     descriptionPj = "<descriptionPj>",
        ///     picturePj = new {},
        ///     totalPricePj = 123.45f,
        ///     idPs1 = 1234,
        ///     idP1 = "<idP1>",
        ///     idC1 = "<idC1>",
        /// };
        /// 
        /// Response response = await client.PutProjectAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   idPj: string, # Optional.
        ///   titlePj: string, # Optional.
        ///   descriptionPj: string, # Optional.
        ///   picturePj: Bytes, # Optional.
        ///   totalPricePj: number, # Optional.
        ///   idPs1: number, # Optional.
        ///   idP1: string, # Optional.
        ///   idC1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutProjectAsync(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutProjectRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutProject with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutProject("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutProject with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPj = "<idPj>",
        ///     titlePj = "<titlePj>",
        ///     descriptionPj = "<descriptionPj>",
        ///     picturePj = new {},
        ///     totalPricePj = 123.45f,
        ///     idPs1 = 1234,
        ///     idP1 = "<idP1>",
        ///     idC1 = "<idC1>",
        /// };
        /// 
        /// Response response = client.PutProject("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   idPj: string, # Optional.
        ///   titlePj: string, # Optional.
        ///   descriptionPj: string, # Optional.
        ///   picturePj: Bytes, # Optional.
        ///   totalPricePj: number, # Optional.
        ///   idPs1: number, # Optional.
        ///   idP1: string, # Optional.
        ///   idC1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutProject(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutProjectRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteProjectAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteProjectAsync("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteProjectAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProjectRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteProject with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteProject("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteProject(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProjectRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProjectstatusesAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetProjectstatusesAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idPs").ToString());
        /// Console.WriteLine(result[0].GetProperty("namePs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Projectstatus</c>:
        /// <code>{
        ///   idPs: number, # Optional.
        ///   namePs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetProjectstatusesAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProjectstatuses");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProjectstatusesRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProjectstatuses and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetProjectstatuses();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idPs").ToString());
        /// Console.WriteLine(result[0].GetProperty("namePs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Projectstatus</c>:
        /// <code>{
        ///   idPs: number, # Optional.
        ///   namePs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProjectstatuses(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProjectstatuses");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProjectstatusesRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostProjectstatusAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostProjectstatusAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostProjectstatusAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPs = 1234,
        ///     namePs = "<namePs>",
        /// };
        /// 
        /// Response response = await client.PostProjectstatusAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPs").ToString());
        /// Console.WriteLine(result.GetProperty("namePs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Projectstatus</c>:
        /// <code>{
        ///   idPs: number, # Optional.
        ///   namePs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Projectstatus</c>:
        /// <code>{
        ///   idPs: number, # Optional.
        ///   namePs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostProjectstatusAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostProjectstatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostProjectstatusRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostProjectstatus with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostProjectstatus(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostProjectstatus with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPs = 1234,
        ///     namePs = "<namePs>",
        /// };
        /// 
        /// Response response = client.PostProjectstatus(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPs").ToString());
        /// Console.WriteLine(result.GetProperty("namePs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Projectstatus</c>:
        /// <code>{
        ///   idPs: number, # Optional.
        ///   namePs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Projectstatus</c>:
        /// <code>{
        ///   idPs: number, # Optional.
        ///   namePs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostProjectstatus(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostProjectstatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostProjectstatusRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProjectstatusAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetProjectstatusAsync(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPs").ToString());
        /// Console.WriteLine(result.GetProperty("namePs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Projectstatus</c>:
        /// <code>{
        ///   idPs: number, # Optional.
        ///   namePs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetProjectstatusAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProjectstatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProjectstatusRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProjectstatus with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetProjectstatus(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPs").ToString());
        /// Console.WriteLine(result.GetProperty("namePs").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Projectstatus</c>:
        /// <code>{
        ///   idPs: number, # Optional.
        ///   namePs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProjectstatus(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProjectstatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProjectstatusRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutProjectstatusAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutProjectstatusAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutProjectstatusAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPs = 1234,
        ///     namePs = "<namePs>",
        /// };
        /// 
        /// Response response = await client.PutProjectstatusAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Projectstatus</c>:
        /// <code>{
        ///   idPs: number, # Optional.
        ///   namePs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutProjectstatusAsync(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutProjectstatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutProjectstatusRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutProjectstatus with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutProjectstatus(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutProjectstatus with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPs = 1234,
        ///     namePs = "<namePs>",
        /// };
        /// 
        /// Response response = client.PutProjectstatus(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Projectstatus</c>:
        /// <code>{
        ///   idPs: number, # Optional.
        ///   namePs: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutProjectstatus(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutProjectstatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutProjectstatusRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteProjectstatusAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteProjectstatusAsync(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteProjectstatusAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteProjectstatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProjectstatusRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteProjectstatus with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteProjectstatus(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteProjectstatus(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteProjectstatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProjectstatusRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProposalsAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetProposalsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idPp").ToString());
        /// Console.WriteLine(result[0].GetProperty("titlePp").ToString());
        /// Console.WriteLine(result[0].GetProperty("descriptionPp").ToString());
        /// Console.WriteLine(result[0].GetProperty("picturePp").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("idP3").ToString());
        /// Console.WriteLine(result[0].GetProperty("idC3").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Proposal</c>:
        /// <code>{
        ///   idPp: string, # Optional.
        ///   titlePp: string, # Optional.
        ///   descriptionPp: string, # Optional.
        ///   picturePp: Bytes, # Optional.
        ///   suggestedStart: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   suggestedEnd: DateOnly, # Optional.
        ///   idP3: string, # Optional.
        ///   idC3: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetProposalsAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProposals");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProposalsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProposals and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetProposals();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idPp").ToString());
        /// Console.WriteLine(result[0].GetProperty("titlePp").ToString());
        /// Console.WriteLine(result[0].GetProperty("descriptionPp").ToString());
        /// Console.WriteLine(result[0].GetProperty("picturePp").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedStart").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("year").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("month").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("day").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result[0].GetProperty("suggestedEnd").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result[0].GetProperty("idP3").ToString());
        /// Console.WriteLine(result[0].GetProperty("idC3").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Proposal</c>:
        /// <code>{
        ///   idPp: string, # Optional.
        ///   titlePp: string, # Optional.
        ///   descriptionPp: string, # Optional.
        ///   picturePp: Bytes, # Optional.
        ///   suggestedStart: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   suggestedEnd: DateOnly, # Optional.
        ///   idP3: string, # Optional.
        ///   idC3: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProposals(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProposals");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProposalsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostProposalAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostProposalAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostProposalAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPp = "<idPp>",
        ///     titlePp = "<titlePp>",
        ///     descriptionPp = "<descriptionPp>",
        ///     picturePp = new {},
        ///     suggestedStart = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     suggestedEnd = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     idP3 = "<idP3>",
        ///     idC3 = "<idC3>",
        /// };
        /// 
        /// Response response = await client.PostProposalAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPp").ToString());
        /// Console.WriteLine(result.GetProperty("titlePp").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionPp").ToString());
        /// Console.WriteLine(result.GetProperty("picturePp").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("idP3").ToString());
        /// Console.WriteLine(result.GetProperty("idC3").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Proposal</c>:
        /// <code>{
        ///   idPp: string, # Optional.
        ///   titlePp: string, # Optional.
        ///   descriptionPp: string, # Optional.
        ///   picturePp: Bytes, # Optional.
        ///   suggestedStart: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   suggestedEnd: DateOnly, # Optional.
        ///   idP3: string, # Optional.
        ///   idC3: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Proposal</c>:
        /// <code>{
        ///   idPp: string, # Optional.
        ///   titlePp: string, # Optional.
        ///   descriptionPp: string, # Optional.
        ///   picturePp: Bytes, # Optional.
        ///   suggestedStart: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   suggestedEnd: DateOnly, # Optional.
        ///   idP3: string, # Optional.
        ///   idC3: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostProposalAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostProposal");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostProposalRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostProposal with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostProposal(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostProposal with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPp = "<idPp>",
        ///     titlePp = "<titlePp>",
        ///     descriptionPp = "<descriptionPp>",
        ///     picturePp = new {},
        ///     suggestedStart = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     suggestedEnd = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     idP3 = "<idP3>",
        ///     idC3 = "<idC3>",
        /// };
        /// 
        /// Response response = client.PostProposal(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPp").ToString());
        /// Console.WriteLine(result.GetProperty("titlePp").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionPp").ToString());
        /// Console.WriteLine(result.GetProperty("picturePp").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("idP3").ToString());
        /// Console.WriteLine(result.GetProperty("idC3").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Proposal</c>:
        /// <code>{
        ///   idPp: string, # Optional.
        ///   titlePp: string, # Optional.
        ///   descriptionPp: string, # Optional.
        ///   picturePp: Bytes, # Optional.
        ///   suggestedStart: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   suggestedEnd: DateOnly, # Optional.
        ///   idP3: string, # Optional.
        ///   idC3: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Proposal</c>:
        /// <code>{
        ///   idPp: string, # Optional.
        ///   titlePp: string, # Optional.
        ///   descriptionPp: string, # Optional.
        ///   picturePp: Bytes, # Optional.
        ///   suggestedStart: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   suggestedEnd: DateOnly, # Optional.
        ///   idP3: string, # Optional.
        ///   idC3: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostProposal(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostProposal");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostProposalRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProposalAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetProposalAsync("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPp").ToString());
        /// Console.WriteLine(result.GetProperty("titlePp").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionPp").ToString());
        /// Console.WriteLine(result.GetProperty("picturePp").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("idP3").ToString());
        /// Console.WriteLine(result.GetProperty("idC3").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Proposal</c>:
        /// <code>{
        ///   idPp: string, # Optional.
        ///   titlePp: string, # Optional.
        ///   descriptionPp: string, # Optional.
        ///   picturePp: Bytes, # Optional.
        ///   suggestedStart: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   suggestedEnd: DateOnly, # Optional.
        ///   idP3: string, # Optional.
        ///   idC3: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetProposalAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProposal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProposalRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetProposal with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetProposal("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idPp").ToString());
        /// Console.WriteLine(result.GetProperty("titlePp").ToString());
        /// Console.WriteLine(result.GetProperty("descriptionPp").ToString());
        /// Console.WriteLine(result.GetProperty("picturePp").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedStart").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("year").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("month").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("day").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayOfWeek").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayOfYear").ToString());
        /// Console.WriteLine(result.GetProperty("suggestedEnd").GetProperty("dayNumber").ToString());
        /// Console.WriteLine(result.GetProperty("idP3").ToString());
        /// Console.WriteLine(result.GetProperty("idC3").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Proposal</c>:
        /// <code>{
        ///   idPp: string, # Optional.
        ///   titlePp: string, # Optional.
        ///   descriptionPp: string, # Optional.
        ///   picturePp: Bytes, # Optional.
        ///   suggestedStart: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   suggestedEnd: DateOnly, # Optional.
        ///   idP3: string, # Optional.
        ///   idC3: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProposal(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetProposal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProposalRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutProposalAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutProposalAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutProposalAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPp = "<idPp>",
        ///     titlePp = "<titlePp>",
        ///     descriptionPp = "<descriptionPp>",
        ///     picturePp = new {},
        ///     suggestedStart = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     suggestedEnd = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     idP3 = "<idP3>",
        ///     idC3 = "<idC3>",
        /// };
        /// 
        /// Response response = await client.PutProposalAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Proposal</c>:
        /// <code>{
        ///   idPp: string, # Optional.
        ///   titlePp: string, # Optional.
        ///   descriptionPp: string, # Optional.
        ///   picturePp: Bytes, # Optional.
        ///   suggestedStart: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   suggestedEnd: DateOnly, # Optional.
        ///   idP3: string, # Optional.
        ///   idC3: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutProposalAsync(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutProposal");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutProposalRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutProposal with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutProposal("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutProposal with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idPp = "<idPp>",
        ///     titlePp = "<titlePp>",
        ///     descriptionPp = "<descriptionPp>",
        ///     picturePp = new {},
        ///     suggestedStart = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     suggestedEnd = new {
        ///         year = 1234,
        ///         month = 1234,
        ///         day = 1234,
        ///         dayOfWeek = "0",
        ///     },
        ///     idP3 = "<idP3>",
        ///     idC3 = "<idC3>",
        /// };
        /// 
        /// Response response = client.PutProposal("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Proposal</c>:
        /// <code>{
        ///   idPp: string, # Optional.
        ///   titlePp: string, # Optional.
        ///   descriptionPp: string, # Optional.
        ///   picturePp: Bytes, # Optional.
        ///   suggestedStart: {
        ///     year: number, # Optional.
        ///     month: number, # Optional.
        ///     day: number, # Optional.
        ///     dayOfWeek: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot;, # Optional.
        ///     dayOfYear: number, # Optional.
        ///     dayNumber: number, # Optional.
        ///   }, # Optional.
        ///   suggestedEnd: DateOnly, # Optional.
        ///   idP3: string, # Optional.
        ///   idC3: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutProposal(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutProposal");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutProposalRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteProposalAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteProposalAsync("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteProposalAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteProposal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProposalRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteProposal with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteProposal("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteProposal(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteProposal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProposalRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRanksAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetRanksAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idR").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameR").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Rank</c>:
        /// <code>{
        ///   idR: number, # Optional.
        ///   nameR: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRanksAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetRanks");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRanksRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRanks and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetRanks();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idR").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameR").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Rank</c>:
        /// <code>{
        ///   idR: number, # Optional.
        ///   nameR: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRanks(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetRanks");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRanksRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostRankAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostRankAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostRankAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idR = 1234,
        ///     nameR = "<nameR>",
        /// };
        /// 
        /// Response response = await client.PostRankAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idR").ToString());
        /// Console.WriteLine(result.GetProperty("nameR").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Rank</c>:
        /// <code>{
        ///   idR: number, # Optional.
        ///   nameR: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Rank</c>:
        /// <code>{
        ///   idR: number, # Optional.
        ///   nameR: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostRankAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostRank");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostRankRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostRank with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostRank(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostRank with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idR = 1234,
        ///     nameR = "<nameR>",
        /// };
        /// 
        /// Response response = client.PostRank(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idR").ToString());
        /// Console.WriteLine(result.GetProperty("nameR").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Rank</c>:
        /// <code>{
        ///   idR: number, # Optional.
        ///   nameR: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Rank</c>:
        /// <code>{
        ///   idR: number, # Optional.
        ///   nameR: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostRank(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostRank");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostRankRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRankAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetRankAsync(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idR").ToString());
        /// Console.WriteLine(result.GetProperty("nameR").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Rank</c>:
        /// <code>{
        ///   idR: number, # Optional.
        ///   nameR: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRankAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetRank");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRankRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRank with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetRank(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idR").ToString());
        /// Console.WriteLine(result.GetProperty("nameR").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Rank</c>:
        /// <code>{
        ///   idR: number, # Optional.
        ///   nameR: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRank(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetRank");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRankRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutRankAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutRankAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutRankAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idR = 1234,
        ///     nameR = "<nameR>",
        /// };
        /// 
        /// Response response = await client.PutRankAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Rank</c>:
        /// <code>{
        ///   idR: number, # Optional.
        ///   nameR: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutRankAsync(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutRank");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutRankRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutRank with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutRank(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutRank with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idR = 1234,
        ///     nameR = "<nameR>",
        /// };
        /// 
        /// Response response = client.PutRank(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Rank</c>:
        /// <code>{
        ///   idR: number, # Optional.
        ///   nameR: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutRank(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutRank");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutRankRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteRankAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteRankAsync(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteRankAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteRank");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRankRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteRank with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteRank(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteRank(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteRank");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRankRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTagsAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetTagsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idT").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameT").ToString());
        /// Console.WriteLine(result[0].GetProperty("idPj1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Tag</c>:
        /// <code>{
        ///   idT: string, # Optional.
        ///   nameT: string, # Optional.
        ///   idPj1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTagsAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetTags");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTagsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTags and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetTags();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("idT").ToString());
        /// Console.WriteLine(result[0].GetProperty("nameT").ToString());
        /// Console.WriteLine(result[0].GetProperty("idPj1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Tag</c>:
        /// <code>{
        ///   idT: string, # Optional.
        ///   nameT: string, # Optional.
        ///   idPj1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTags(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetTags");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTagsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostTagAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostTagAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostTagAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idT = "<idT>",
        ///     nameT = "<nameT>",
        ///     idPj1 = "<idPj1>",
        /// };
        /// 
        /// Response response = await client.PostTagAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idT").ToString());
        /// Console.WriteLine(result.GetProperty("nameT").ToString());
        /// Console.WriteLine(result.GetProperty("idPj1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Tag</c>:
        /// <code>{
        ///   idT: string, # Optional.
        ///   nameT: string, # Optional.
        ///   idPj1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Tag</c>:
        /// <code>{
        ///   idT: string, # Optional.
        ///   nameT: string, # Optional.
        ///   idPj1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostTagAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostTagRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PostTag with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostTag(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call PostTag with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idT = "<idT>",
        ///     nameT = "<nameT>",
        ///     idPj1 = "<idPj1>",
        /// };
        /// 
        /// Response response = client.PostTag(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idT").ToString());
        /// Console.WriteLine(result.GetProperty("nameT").ToString());
        /// Console.WriteLine(result.GetProperty("idPj1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Tag</c>:
        /// <code>{
        ///   idT: string, # Optional.
        ///   nameT: string, # Optional.
        ///   idPj1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Tag</c>:
        /// <code>{
        ///   idT: string, # Optional.
        ///   nameT: string, # Optional.
        ///   idPj1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostTag(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PostTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostTagRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTagAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.GetTagAsync("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idT").ToString());
        /// Console.WriteLine(result.GetProperty("nameT").ToString());
        /// Console.WriteLine(result.GetProperty("idPj1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Tag</c>:
        /// <code>{
        ///   idT: string, # Optional.
        ///   nameT: string, # Optional.
        ///   idPj1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTagAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTagRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTag with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.GetTag("<id>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("idT").ToString());
        /// Console.WriteLine(result.GetProperty("nameT").ToString());
        /// Console.WriteLine(result.GetProperty("idPj1").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Tag</c>:
        /// <code>{
        ///   idT: string, # Optional.
        ///   nameT: string, # Optional.
        ///   idPj1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTag(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.GetTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTagRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutTagAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PutTagAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutTagAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idT = "<idT>",
        ///     nameT = "<nameT>",
        ///     idPj1 = "<idPj1>",
        /// };
        /// 
        /// Response response = await client.PutTagAsync("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Tag</c>:
        /// <code>{
        ///   idT: string, # Optional.
        ///   nameT: string, # Optional.
        ///   idPj1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutTagAsync(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutTagRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PutTag with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PutTag("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PutTag with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// var data = new {
        ///     idT = "<idT>",
        ///     nameT = "<nameT>",
        ///     idPj1 = "<idPj1>",
        /// };
        /// 
        /// Response response = client.PutTag("<id>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Tag</c>:
        /// <code>{
        ///   idT: string, # Optional.
        ///   nameT: string, # Optional.
        ///   idPj1: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutTag(string id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.PutTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutTagRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteTagAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = await client.DeleteTagAsync("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteTagAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTagRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteTag with required parameters.
        /// <code><![CDATA[
        /// var client = new WebServiceClient();
        /// 
        /// Response response = client.DeleteTag("<id>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteTag(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("WebServiceClient.DeleteTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTagRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetActivitiesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Activities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostActivityRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Activities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetActivityRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Activities/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutActivityRequest(string id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Activities/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteActivityRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Activities/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetAdminsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Admins", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostAdminRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Admins", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetAdminRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Admins/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutAdminRequest(string id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Admins/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteAdminRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Admins/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetClientsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Clients", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostClientRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Clients", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetClientRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Clients/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutClientRequest(string id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Clients/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteClientRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Clients/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetDepartmentsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Departments", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostDepartmentRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Departments", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetDepartmentRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Departments/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutDepartmentRequest(int id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Departments/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteDepartmentRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Departments/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetNotificationsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Notifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostNotificationRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Notifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetNotificationRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Notifications/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutNotificationRequest(string id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Notifications/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteNotificationRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Notifications/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetProfessionalsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Professionals", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostProfessionalRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Professionals", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetProfessionalRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Professionals/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutProfessionalRequest(string id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Professionals/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteProfessionalRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Professionals/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetProfessionsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Professions", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostProfessionRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Professions", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetProfessionRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Professions/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutProfessionRequest(int id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Professions/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteProfessionRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Professions/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetProjectsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Projects", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostProjectRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Projects", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetProjectRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Projects/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutProjectRequest(string id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Projects/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteProjectRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Projects/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetProjectstatusesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Projectstatus", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostProjectstatusRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Projectstatus", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetProjectstatusRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Projectstatus/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutProjectstatusRequest(int id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Projectstatus/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteProjectstatusRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Projectstatus/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetProposalsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Proposals", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostProposalRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Proposals", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetProposalRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Proposals/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutProposalRequest(string id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Proposals/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteProposalRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Proposals/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetRanksRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Ranks", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostRankRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Ranks", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRankRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Ranks/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutRankRequest(int id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Ranks/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRankRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Ranks/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetTagsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Tags", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostTagRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Tags", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetTagRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Tags/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePutTagRequest(string id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Tags/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteTagRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Tags/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
