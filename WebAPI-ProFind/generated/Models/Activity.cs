// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WebAPI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Activity
    {
        /// <summary>
        /// Initializes a new instance of the Activity class.
        /// </summary>
        public Activity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Activity class.
        /// </summary>
        public Activity(string idA = default(string), string titleA = default(string), string descriptionA = default(string), DateOnly expectedBeginA = default(DateOnly), DateOnly expectedEndA = default(DateOnly), byte[] pictureA = default(byte[]), string idPj1 = default(string), string idT1 = default(string))
        {
            IdA = idA;
            TitleA = titleA;
            DescriptionA = descriptionA;
            ExpectedBeginA = expectedBeginA;
            ExpectedEndA = expectedEndA;
            PictureA = pictureA;
            IdPj1 = idPj1;
            IdT1 = idT1;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idA")]
        public string IdA { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "titleA")]
        public string TitleA { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "descriptionA")]
        public string DescriptionA { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "expectedBeginA")]
        public DateOnly ExpectedBeginA { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "expectedEndA")]
        public DateOnly ExpectedEndA { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pictureA")]
        public byte[] PictureA { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idPj1")]
        public string IdPj1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idT1")]
        public string IdT1 { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IdA != null)
            {
                if (IdA.Length > 21)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdA", 21);
                }
                if (IdA.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdA", 0);
                }
            }
            if (TitleA != null)
            {
                if (TitleA.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TitleA", 50);
                }
                if (TitleA.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "TitleA", 0);
                }
            }
            if (DescriptionA != null)
            {
                if (DescriptionA.Length > 500)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DescriptionA", 500);
                }
                if (DescriptionA.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DescriptionA", 0);
                }
            }
            if (IdPj1 != null)
            {
                if (IdPj1.Length > 21)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdPj1", 21);
                }
                if (IdPj1.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdPj1", 0);
                }
            }
            if (IdT1 != null)
            {
                if (IdT1.Length > 21)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdT1", 21);
                }
                if (IdT1.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdT1", 0);
                }
            }
        }
    }
}
