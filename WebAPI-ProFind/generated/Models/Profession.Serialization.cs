// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace WebAPI.Models
{
    public partial class Profession : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(IdPfs))
            {
                writer.WritePropertyName("idPfs");
                writer.WriteNumberValue(IdPfs.Value);
            }
            if (Optional.IsDefined(NamePfs))
            {
                if (NamePfs != null)
                {
                    writer.WritePropertyName("namePfs");
                    writer.WriteStringValue(NamePfs);
                }
                else
                {
                    writer.WriteNull("namePfs");
                }
            }
            writer.WriteEndObject();
        }

        internal static Profession DeserializeProfession(JsonElement element)
        {
            Optional<int> idPfs = default;
            Optional<string> namePfs = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("idPfs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    idPfs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("namePfs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        namePfs = null;
                        continue;
                    }
                    namePfs = property.Value.GetString();
                    continue;
                }
            }
            return new Profession(Optional.ToNullable(idPfs), namePfs.Value);
        }
    }
}
