// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace WebAPI.Models
{
    public partial class DateOnly : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Year))
            {
                writer.WritePropertyName("year");
                writer.WriteNumberValue(Year.Value);
            }
            if (Optional.IsDefined(Month))
            {
                writer.WritePropertyName("month");
                writer.WriteNumberValue(Month.Value);
            }
            if (Optional.IsDefined(Day))
            {
                writer.WritePropertyName("day");
                writer.WriteNumberValue(Day.Value);
            }
            if (Optional.IsDefined(DayOfWeek))
            {
                writer.WritePropertyName("dayOfWeek");
                writer.WriteStringValue(DayOfWeek.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static DateOnly DeserializeDateOnly(JsonElement element)
        {
            Optional<int> year = default;
            Optional<int> month = default;
            Optional<int> day = default;
            Optional<DayOfWeek> dayOfWeek = default;
            Optional<int> dayOfYear = default;
            Optional<int> dayNumber = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("year"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    year = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("month"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    month = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("day"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    day = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("dayOfWeek"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dayOfWeek = new DayOfWeek(property.Value.GetInt32());
                    continue;
                }
                if (property.NameEquals("dayOfYear"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dayOfYear = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("dayNumber"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dayNumber = property.Value.GetInt32();
                    continue;
                }
            }
            return new DateOnly(Optional.ToNullable(year), Optional.ToNullable(month), Optional.ToNullable(day), Optional.ToNullable(dayOfWeek), Optional.ToNullable(dayOfYear), Optional.ToNullable(dayNumber));
        }
    }
}
