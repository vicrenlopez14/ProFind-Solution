// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace WebAPI.Models
{
    /// <summary> The DayOfWeek. </summary>
    public readonly partial struct DayOfWeek : IEquatable<DayOfWeek>
    {
        private readonly int _value;

        /// <summary> Initializes a new instance of <see cref="DayOfWeek"/>. </summary>
        public DayOfWeek(int value)
        {
            _value = value;
        }

        private const int ZeroValue = 0;
        private const int OneValue = 1;
        private const int TwoValue = 2;
        private const int ThreeValue = 3;
        private const int FourValue = 4;
        private const int FiveValue = 5;
        private const int SixValue = 6;

        /// <summary> 0. </summary>
        public static DayOfWeek Zero { get; } = new DayOfWeek(ZeroValue);
        /// <summary> 1. </summary>
        public static DayOfWeek One { get; } = new DayOfWeek(OneValue);
        /// <summary> 2. </summary>
        public static DayOfWeek Two { get; } = new DayOfWeek(TwoValue);
        /// <summary> 3. </summary>
        public static DayOfWeek Three { get; } = new DayOfWeek(ThreeValue);
        /// <summary> 4. </summary>
        public static DayOfWeek Four { get; } = new DayOfWeek(FourValue);
        /// <summary> 5. </summary>
        public static DayOfWeek Five { get; } = new DayOfWeek(FiveValue);
        /// <summary> 6. </summary>
        public static DayOfWeek Six { get; } = new DayOfWeek(SixValue);
        /// <summary> Determines if two <see cref="DayOfWeek"/> values are the same. </summary>
        public static bool operator ==(DayOfWeek left, DayOfWeek right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DayOfWeek"/> values are not the same. </summary>
        public static bool operator !=(DayOfWeek left, DayOfWeek right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DayOfWeek"/>. </summary>
        public static implicit operator DayOfWeek(int value) => new DayOfWeek(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DayOfWeek other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DayOfWeek other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
