// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WebAPI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Project
    {
        /// <summary>
        /// Initializes a new instance of the Project class.
        /// </summary>
        public Project()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Project class.
        /// </summary>
        public Project(string idPj = default(string), string titlePj = default(string), string descriptionPj = default(string), byte[] picturePj = default(byte[]), double? totalPricePj = default(double?), int? idPs1 = default(int?), string idP1 = default(string), string idC1 = default(string))
        {
            IdPj = idPj;
            TitlePj = titlePj;
            DescriptionPj = descriptionPj;
            PicturePj = picturePj;
            TotalPricePj = totalPricePj;
            IdPs1 = idPs1;
            IdP1 = idP1;
            IdC1 = idC1;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idPj")]
        public string IdPj { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "titlePj")]
        public string TitlePj { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "descriptionPj")]
        public string DescriptionPj { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "picturePj")]
        public byte[] PicturePj { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalPricePj")]
        public double? TotalPricePj { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idPs1")]
        public int? IdPs1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idP1")]
        public string IdP1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idC1")]
        public string IdC1 { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IdPj != null)
            {
                if (IdPj.Length > 21)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdPj", 21);
                }
                if (IdPj.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdPj", 0);
                }
            }
            if (TitlePj != null)
            {
                if (TitlePj.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TitlePj", 50);
                }
                if (TitlePj.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "TitlePj", 0);
                }
            }
            if (DescriptionPj != null)
            {
                if (DescriptionPj.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DescriptionPj", 50);
                }
                if (DescriptionPj.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DescriptionPj", 0);
                }
            }
            if (IdP1 != null)
            {
                if (IdP1.Length > 21)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdP1", 21);
                }
                if (IdP1.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdP1", 0);
                }
            }
            if (IdC1 != null)
            {
                if (IdC1.Length > 21)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdC1", 21);
                }
                if (IdC1.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdC1", 0);
                }
            }
        }
    }
}
