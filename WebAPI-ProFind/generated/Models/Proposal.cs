// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WebAPI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Proposal
    {
        /// <summary>
        /// Initializes a new instance of the Proposal class.
        /// </summary>
        public Proposal()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Proposal class.
        /// </summary>
        public Proposal(string idPp = default(string), string titlePp = default(string), string descriptionPp = default(string), byte[] picturePp = default(byte[]), DateOnly suggestedStart = default(DateOnly), DateOnly suggestedEnd = default(DateOnly), string idP3 = default(string), string idC3 = default(string))
        {
            IdPp = idPp;
            TitlePp = titlePp;
            DescriptionPp = descriptionPp;
            PicturePp = picturePp;
            SuggestedStart = suggestedStart;
            SuggestedEnd = suggestedEnd;
            IdP3 = idP3;
            IdC3 = idC3;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idPp")]
        public string IdPp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "titlePp")]
        public string TitlePp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "descriptionPp")]
        public string DescriptionPp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "picturePp")]
        public byte[] PicturePp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "suggestedStart")]
        public DateOnly SuggestedStart { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "suggestedEnd")]
        public DateOnly SuggestedEnd { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idP3")]
        public string IdP3 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idC3")]
        public string IdC3 { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IdPp != null)
            {
                if (IdPp.Length > 21)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdPp", 21);
                }
                if (IdPp.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdPp", 0);
                }
            }
            if (TitlePp != null)
            {
                if (TitlePp.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TitlePp", 50);
                }
                if (TitlePp.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "TitlePp", 0);
                }
            }
            if (DescriptionPp != null)
            {
                if (DescriptionPp.Length > 500)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DescriptionPp", 500);
                }
                if (DescriptionPp.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DescriptionPp", 0);
                }
            }
            if (IdP3 != null)
            {
                if (IdP3.Length > 21)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdP3", 21);
                }
                if (IdP3.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdP3", 0);
                }
            }
            if (IdC3 != null)
            {
                if (IdC3.Length > 21)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdC3", 21);
                }
                if (IdC3.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdC3", 0);
                }
            }
        }
    }
}
