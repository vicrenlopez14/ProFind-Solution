// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace WebAPI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Professional
    {
        /// <summary>
        /// Initializes a new instance of the Professional class.
        /// </summary>
        public Professional()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Professional class.
        /// </summary>
        public Professional(string idP = default(string), string nameP = default(string), DateOnly dateBirthP = default(DateOnly), string emailP = default(string), string passwordP = default(string), bool? activeP = default(bool?), bool? sexP = default(bool?), string duip = default(string), string afpp = default(string), string isssp = default(string), string zipCodeP = default(string), double? salaryP = default(double?), DateOnly hiringDateP = default(DateOnly), byte[] pictureP = default(byte[]), byte[] curriculumP = default(byte[]), int? idPfs1 = default(int?), int? idDp1 = default(int?), int? idWdt1 = default(int?))
        {
            IdP = idP;
            NameP = nameP;
            DateBirthP = dateBirthP;
            EmailP = emailP;
            PasswordP = passwordP;
            ActiveP = activeP;
            SexP = sexP;
            Duip = duip;
            Afpp = afpp;
            Isssp = isssp;
            ZipCodeP = zipCodeP;
            SalaryP = salaryP;
            HiringDateP = hiringDateP;
            PictureP = pictureP;
            CurriculumP = curriculumP;
            IdPfs1 = idPfs1;
            IdDp1 = idDp1;
            IdWdt1 = idWdt1;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idP")]
        public string IdP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nameP")]
        public string NameP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dateBirthP")]
        public DateOnly DateBirthP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "emailP")]
        public string EmailP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "passwordP")]
        public string PasswordP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activeP")]
        public bool? ActiveP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sexP")]
        public bool? SexP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "duip")]
        public string Duip { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "afpp")]
        public string Afpp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isssp")]
        public string Isssp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "zipCodeP")]
        public string ZipCodeP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "salaryP")]
        public double? SalaryP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hiringDateP")]
        public DateOnly HiringDateP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pictureP")]
        public byte[] PictureP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "curriculumP")]
        public byte[] CurriculumP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idPfs1")]
        public int? IdPfs1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idDp1")]
        public int? IdDp1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idWdt1")]
        public int? IdWdt1 { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IdP != null)
            {
                if (IdP.Length > 21)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IdP", 21);
                }
                if (IdP.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IdP", 0);
                }
            }
            if (NameP != null)
            {
                if (NameP.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "NameP", 50);
                }
                if (NameP.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "NameP", 0);
                }
            }
            if (EmailP != null)
            {
                if (EmailP.Length > 21)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "EmailP", 21);
                }
                if (EmailP.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "EmailP", 0);
                }
            }
            if (PasswordP != null)
            {
                if (PasswordP.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PasswordP", 64);
                }
                if (PasswordP.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "PasswordP", 0);
                }
            }
            if (Duip != null)
            {
                if (Duip.Length > 15)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Duip", 15);
                }
                if (Duip.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Duip", 0);
                }
            }
            if (Afpp != null)
            {
                if (Afpp.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Afpp", 50);
                }
                if (Afpp.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Afpp", 0);
                }
            }
            if (Isssp != null)
            {
                if (Isssp.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Isssp", 50);
                }
                if (Isssp.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Isssp", 0);
                }
            }
            if (ZipCodeP != null)
            {
                if (ZipCodeP.Length > 10)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ZipCodeP", 10);
                }
                if (ZipCodeP.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ZipCodeP", 0);
                }
            }
        }
    }
}
