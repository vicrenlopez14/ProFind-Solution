// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace WebAPI.Models
{
    public partial class Tag : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(IdT))
            {
                if (IdT != null)
                {
                    writer.WritePropertyName("idT");
                    writer.WriteStringValue(IdT);
                }
                else
                {
                    writer.WriteNull("idT");
                }
            }
            if (Optional.IsDefined(NameT))
            {
                if (NameT != null)
                {
                    writer.WritePropertyName("nameT");
                    writer.WriteStringValue(NameT);
                }
                else
                {
                    writer.WriteNull("nameT");
                }
            }
            if (Optional.IsDefined(IdPj1))
            {
                if (IdPj1 != null)
                {
                    writer.WritePropertyName("idPj1");
                    writer.WriteStringValue(IdPj1);
                }
                else
                {
                    writer.WriteNull("idPj1");
                }
            }
            writer.WriteEndObject();
        }

        internal static Tag DeserializeTag(JsonElement element)
        {
            Optional<string> idT = default;
            Optional<string> nameT = default;
            Optional<string> idPj1 = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("idT"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        idT = null;
                        continue;
                    }
                    idT = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nameT"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nameT = null;
                        continue;
                    }
                    nameT = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("idPj1"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        idPj1 = null;
                        continue;
                    }
                    idPj1 = property.Value.GetString();
                    continue;
                }
            }
            return new Tag(idT.Value, nameT.Value, idPj1.Value);
        }
    }
}
